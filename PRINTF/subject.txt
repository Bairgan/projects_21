• Ваш проект должен быть написан в соответствии с Нормой. Если у вас есть бонусные файлы / функции, они включаются в проверку нормы, и вы получите 0, если внутри есть ошибка нормы.
• Ваши функции не должны завершаться неожиданно (ошибка сегментации, ошибка шины, двойное освобождение и т. Д.), За исключением неопределенного поведения. Если это произойдет, ваш проект будет считаться нефункциональным и получит 0 во время оценки.
• Все пространство памяти, выделенное кучей, должно быть должным образом освобождено при необходимости. Утечки недопустимы.
• Если субъект требует этого, вы должны отправить Makefile, который скомпилирует ваши исходные файлы в требуемый вывод с флагами -Wall, -Wextra и -Werror, и ваш Makefile не должен повторно связываться.
• Ваш Makefile должен содержать как минимум правила $ (NAME), all, clean, fclean и re.
• Чтобы превратить бонусы в свой проект, вы должны включить бонус правила в свой Makefile, который добавит все различные заголовки, библиотеки или функции, запрещенные в основной части проекта. Бонусы должны быть в другом файле _bonus. {C / h}.
Оценка обязательной и бонусной части проводится отдельно.
• Если ваш проект позволяет вам использовать ваш libft, вы должны скопировать его исходный код и связанный с ним Makefile в папку libft с соответствующим Makefile. Ваш проект
Makefile должен скомпилировать библиотеку, используя свой Makefile, а затем скомпилировать проект.
• Мы рекомендуем вам создавать программы тестирования для вашего проекта, даже если эту работу не нужно будет отправлять и оценивать. Это даст тебе шанс
чтобы легко проверить свою работу и работу коллег. Вы найдете эти тесты особенно полезными во время защиты. Действительно, во время защиты вы можете использовать свои тесты и / или тесты партнера, которого вы оцениваете.
• Отправьте свою работу в назначенный репозиторий git. Оцениваться будет только работа в репозитории git. Если DeepThreadt назначен для оценки вашей работы, это будет сделано после ваших оценок коллег. Если во время выставления оценок Deepoughtt в каком-либо разделе вашей работы произойдет ошибка, оценка будет остановлена.

Обязательная часть
Название программы libftprintf.a
Включите файлы * .c, * / *. C, * .h, * / *. H, Makefile
Makefile: all, clean, fclean, re, Bonus
Внешние функции: malloc, бесплатно, запись, va_start, va_arg, va_copy, va_end
Libft авторизован: да
Описание: Напишите библиотеку, содержащую ft_printf, функцию который будет имитировать настоящий printf

• Прототип ft_printf должен быть int ft_printf (const char *, ...);
• Вам необходимо перекодировать функцию printf библиотеки libc
• Он не должен управлять буфером, как настоящий printf.
• Он будет управлять следующими преобразованиями: cspdiuxX%
• Он будет сравнен с реальным printf
• Вы должны использовать команду ar для создания вашей библиотеки, использование команды libtool запрещено.

printf Потому что putnbr и putstr недостаточно

Небольшое описание необходимого преобразования:
•% c печатает один символ.
•% s вывести строку символов.
•% p Аргумент указателя void * печатается в шестнадцатеричном формате.
•% d вывести десятичное число (с основанием 10).
•% i вывести целое число по основанию 10.
•% u вывести десятичное число без знака (с основанием 10).
•% x вывести число в шестнадцатеричном формате (с основанием 16).
• %% вывести знак процента.
для более полных ссылок: man 3 printf / man 3 stdarg

