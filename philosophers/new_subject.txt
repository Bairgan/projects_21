Обзор
Вот что вам нужно знать, если вы хотите добиться успеха в этом задании:
• Один или несколько философов сидят за круглым столом. В центре стола стоит большая тарелка со спагетти.
• Философы попеременно едят, думают или спят.
Пока они едят, они не думают и не спят;
думая, они не едят и не спят;
и, конечно, во сне они не едят и не думают.
• На столе также лежат вилки. Вилок столько же, сколько философов.
• Поскольку подавать и есть спагетти только одной вилкой очень неудобно, философ берет их правую и левую вилки, чтобы есть, по одной в каждую руку.
• Покончив с едой, философ кладет вилки обратно на стол и засыпает. Проснувшись, они снова начинают думать. Симуляция останавливается, когда философ умирает от голода.
• Каждый философ должен есть и никогда не должен голодать.
• Философы не разговаривают друг с другом.
• Философы не знают, что другой философ вот-вот умрет.
• Нет необходимости говорить, что философы должны избегать смерти

Вы должны написать программу для обязательной части и еще одну для бонусной части (если вы решите сделать бонусную часть). Оба они должны соблюдать следующие правила:
• Глобальные переменные запрещены!
• Ваша(ие) программа(ы) должна(ы) принимать следующие аргументы:
number_of_philosophers time_to_die time_to_eat time_to_sleep 
[number_of_times_each_philosopher_must_eat]

◦ number_of_philosophers: количество философов, а также количество разветвлений.
◦ time_to_die (в миллисекундах): если философ не начал есть time_to_die в миллисекундах с начала своего последнего приема пищи или начала симуляции, он умирает.
◦ time_to_eat (в миллисекундах): время, которое требуется философу, чтобы поесть.
За это время им нужно будет держать две вилки.
◦ time_to_sleep (в миллисекундах): время, которое философ проведет во сне.
◦ number_of_times_each_philosopher_must_eat (необязательный аргумент): если все философы съели не менее number_of_times_each_philosopher_must_eat раз, симуляция останавливается. Если не указано иное, симуляция останавливается, когда философ умирает.
• У каждого философа есть число от 1 до number_of_philosophers.
• Философ номер 1 сидит рядом с философом номер number_of_philosophers.
Любой другой философ с номером N находится между философом с номером N - 1 и философом с номером N + 1.

Философы Я никогда не думал, что философия может быть настолько смертоносной
О логах вашей программы:
• Любое изменение состояния философа должно быть оформлено следующим образом:
◦ timestamp_in_ms X сделал ответвление
◦ timestamp_in_ms X ест
◦ timestamp_in_ms X спит
◦ timestamp_in_ms X думает
◦ timestamp_in_ms X умер
Замените timestamp_in_ms на текущую метку времени в миллисекундах.
и X с номером философа.
• Отображаемое сообщение о состоянии не следует путать с другим сообщением.
• Сообщение о смерти философа должно отображаться не более чем через 10 мс после фактической смерти философа.
• Опять же, философы должны избегать смерти!

В вашей программе не должно быть гонок данных.

Обязательная часть
Название программы Фило
Закиньте файлы Makefile, *.h, *.c, в директорию philo/
Makefile: NAME, all, clean, fclean, re
Аргументы: number_of_philosophers time_to_die time_to_eat Пора спать [number_of_times_each_philosopher_must_eat]
Внешние функции. memset, printf, malloc, бесплатно, запись, usleep, gettimeofday, pthread_create, pthread_detach, pthread_join, pthread_mutex_init, pthread_mutex_destroy, pthread_mutex_lock,
pthread_mutex_unlock
Авторизованный Libft Нет
Описание Философы с потоками и мьютексами

Особые правила для обязательной части:
• Каждый философ должен быть нитью.
• Между каждой парой философов есть одна развилка. Поэтому, если их несколько
философы, у каждого философа вилка слева и вилка справа
боковая сторона. Если есть только один философ, на столе должна быть только одна вилка.
• Чтобы философы не дублировали вилки, вы должны защитить состояние вилок.
с мьютексом для каждого из них.



Бонусная часть
Название программы philo_bonus
Закиньте файлы Makefile, *.h, *.c в директорию philo_bonus/
Makefile NAME, all, clean, fclean, re
Аргументы number_of_philosophers time_to_die time_to_eat
Пора спать
[number_of_times_each_philosopher_must_eat]
Внешние функции. memset, printf, malloc, free, write, fork, kill,
выход, pthread_create, pthread_detach, pthread_join,
usleep, gettimeofday, waitpid, sem_open, sem_close,
sem_post, sem_wait, sem_unlink
Авторизованный Libft Нет
Описание Философы с процессами и семафорами

Программа бонусной части использует те же аргументы, что и обязательная программа.
Он должен соответствовать требованиям главы «Глобальные правила».
Конкретные правила для бонусной части:
• Все вилки кладут на середину стола.
• У них нет состояний в памяти, но количество доступных ответвлений представлено
семафор.
• Каждый философ должен быть процессом. Но основной процесс не должен быть
философ.
Бонусная часть будет оцениваться только в том случае, если обязательная часть
ИДЕАЛЬНО. Perfect означает, что обязательная часть была полностью выполнена
и работает без сбоев. Если вы не прошли ВСЕ
обязательные требования, ваша бонусная часть вообще не будет оцениваться.

Чтобы включить бонусы в свой проект, вы должны включить бонусное правило в свой Makefile, которое добавит все различные заголовки, библиотеки или функции, запрещенные в основной части проекта. Бонусы должны быть в другом файле _bonus.{c/h}, если в теме не указано ничего другого. Обязательная и бонусная части оцениваются отдельно.
